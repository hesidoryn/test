// flow-typed signature: 4e29e42ad60593a2c818235a4a78f763
// flow-typed version: <<STUB>>/react-router-redux_v5.0.0/flow_v0.66.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-router-redux'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

import {
  Store,
  Dispatch,
  Middleware,
  Reducer
} from 'redux';
import {
  History,
  Location,
  Path,
  LocationState,
  LocationDescriptor
} from 'history';
import { match } from 'react-router-dom';

declare module 'react-router-redux' {
  declare export interface ConnectedRouterProps<State>{
    store?: Store<State>,
    history: History
  }
  declare export class ConnectedRouter<State>mixins React$Component<ConnectedRouterProps<State >> {}
  declare export var LOCATION_CHANGE: string;
  declare export interface RouterState {
    location: Location | null
  }

  declare export type LocationActionPayload = {
    method: string,
    args?: Array<any>
  }

  declare export type RouterAction = {
    type: string,
    payload: LocationActionPayload
  }

  declare export var routerReducer: Reducer<RouterState>;
  declare export var CALL_HISTORY_METHOD: string;
  declare export function push(location: LocationDescriptor, state?: LocationState): RouterAction;
  declare export function replace(location: LocationDescriptor, state?: LocationState): RouterAction;
  declare export function go(n: number): RouterAction;
  declare export function goBack(): RouterAction;
  declare export function goForward(): RouterAction;
  declare export var routerActions: {
    push: typeof push,
    replace: typeof replace,
    go: typeof go,
    goBack: typeof goBack,
    goForward: typeof goForward
  };
  
  declare export interface LocationChangeAction {
    type: string,
    payload: Location & {
      props?: {
        match: {
          path: string,
          url: string,
          params: any,
          isExact: boolean
        },
        location: Location,
        history: History
      }
    }
  }
  declare export function routerMiddleware(history: History): Middleware;
  declare export function createMatchSelector(path: string): (state: {
    router: RouterState
  }) => match<{}> | null
}
